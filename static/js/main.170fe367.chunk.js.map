{"version":3,"sources":["reducers/rootReducer.js","Question.js","Magic8Ball.js","App.js","serviceWorker.js","index.js"],"names":["initialState","prediction","text","fail","loading","visibility","rootReducer","state","action","type","payload","Question","useState","input","setInput","question","setQuestion","setError","dispatch","useDispatch","fetchAnswer","useCallback","uri","encodeURIComponent","fetch","then","res","json","data","catch","error","message","console","log","useEffect","className","placeholder","onChange","e","target","value","setTimeout","onClick","preventDefault","Magic8Ball","answer","useSelector","response","magic","transition","triangle","eight","App","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SACMA,EAAe,CACjBC,WAAY,GACZC,KAAM,GACNC,KAAM,GACNC,SAAS,EACTC,YAAY,GAmCDC,MAhCf,WAAmD,IAA9BC,EAA6B,uDAArBP,EAAcQ,EAAO,uCAC9C,OAAOA,EAAOC,MACV,IAAK,aACD,OAAO,2BACAF,GADP,IAEIN,WAAYO,EAAOE,SAAW,KAEtC,IAAK,OACD,OAAO,2BACAH,GADP,IAEIL,KAAMM,EAAOE,UAErB,IAAK,OACD,OAAO,2BACAH,GADP,IAEIJ,KAAMK,EAAOE,UAErB,IAAK,UACD,OAAO,2BACAH,GADP,IAEIH,QAASI,EAAOE,UAExB,IAAK,aACD,OAAO,2BACAH,GADP,IAEIF,WAAYG,EAAOE,UAE3B,QACI,OAAOH,I,oBC8BJI,MA/Df,WAAqB,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,OAIUJ,mBAAS,IAJnB,mBAIFK,GAJE,WAKVC,EAAWC,cAEXC,EAAcC,uBAAY,WAC5B,IAEIC,EAAM,8EAFGC,mBAAmBR,GAG7BA,IACCG,EAAS,CAACT,KAAK,UAAWC,SAAS,IACnCc,MAAMF,GACLG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACNV,EAAS,CAACT,KAAK,UAAWC,SAAS,IACnCQ,EAAS,CAAET,KAAM,aAAcC,SAAS,IACxCQ,EAAS,CAACT,KAAK,aAAcC,QAASkB,OAErCC,OAAM,SAAAC,GACHb,EAASa,EAAMC,SACfb,EAAS,CAACT,KAAK,UAAWC,SAAS,IACnCQ,EAAS,CAACT,KAAK,OAAQC,QAASoB,EAAMC,UACtCC,QAAQC,IAAIH,EAAMC,eAM3B,CAACb,EAAUH,EAAUE,IAuBxB,OArBAiB,qBAAU,WACNd,MACD,CAACA,IAoBA,yBAAKe,UAAU,YACX,8BACI,2BAAO1B,KAAK,OAAO2B,YAAY,+BAA+BC,SApBhD,SAACC,GAEvBpB,EAAS,CAAET,KAAM,aAAcC,SAAS,IACxC,IAAIG,EAAQyB,EAAEC,OAAOC,MACrB1B,EAASwB,EAAEC,OAAOC,OAClBC,YAAW,WACPvB,EAAS,CAAET,KAAM,OAAQC,QAASG,MACnC,QAcK,4BAAQ6B,QAXA,SAACJ,GACjBA,EAAEK,iBACF3B,EAAYH,GACZK,EAAS,CAAET,KAAM,OAAQC,QAASG,IAClCK,EAAS,CAAET,KAAM,aAAcC,SAAS,KAOFD,KAAK,UAAnC,W,MC1BDmC,MA/Bf,WACI,IAAMC,EAASC,aAAa,SAACvC,GAAD,OAAWA,EAAMN,cACvCG,EAAU0C,aAAa,SAACvC,GAAD,OAAWA,EAAMH,WACxCC,EAAayC,aAAa,SAACvC,GAAD,OAAWA,EAAMF,cAG3C0C,EAAWF,EAAOG,QAAU5C,EAAUyC,EAAOG,MAAMH,OAAS,KAC5DI,EAAa7C,EAAU,6CAAyB,KAEhD8C,EAAW7C,EACG,yBAAK8B,UAAU,gBACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,YAAYY,KAEzB,KAEvBI,EAAQ,yBAAKhB,UAAU,SACb,wBAAIA,UAAU,UAAd,MAGhB,OACI,yBAAKA,UAAU,aACX,yBAAKA,UAAS,iBAAY/B,EAAU,QAAU,KACzC8C,EACA7C,EAAa,KAAO8C,GAEvBF,I,MCfCG,MAVf,WACE,OACE,yBAAKjB,UAAU,OACb,4CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAYrD,GAE1BsD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUJ,MAAOA,GAChB,kBAAC,EAAD,QAGFK,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLE,QAAQF,MAAMA,EAAMC,c","file":"static/js/main.170fe367.chunk.js","sourcesContent":["\nconst initialState = {\n    prediction: {},\n    text: '',\n    fail: {},\n    loading: false,\n    visibility: false,\n}\n\nfunction rootReducer(state = initialState, action){\n    switch(action.type){\n        case 'PREDICTION':\n            return { \n                ...state,\n                prediction: action.payload || {},\n             }\n        case 'TEXT':\n            return { \n                ...state,\n                text: action.payload,\n            }\n        case 'FAIL':\n            return { \n                ...state,\n                fail: action.payload,\n            }\n        case 'LOADING':\n            return { \n                ...state,\n                loading: action.payload,\n            }\n        case 'VISIBILITY':\n            return { \n                ...state,\n                visibility: action.payload,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './Question.scss';\n\nfunction Question() {\n    const [input, setInput] = useState('');\n    const [question, setQuestion] = useState('');\n    // eslint-disable-next-line \n    const [error, setError] = useState('');\n    const dispatch = useDispatch();\n\n    const fetchAnswer = useCallback(() => {\n        let params = encodeURIComponent(question);\n        // the cors-anywhere part handles a cors error.\n        let uri = \"https://cors-anywhere.herokuapp.com/https://8ball.delegator.com/magic/JSON/\" + params;\n        if(question) {\n            dispatch({type:\"LOADING\", payload: true});\n            fetch(uri)\n            .then(res => res.json())\n            .then(data => {\n            dispatch({type:\"LOADING\", payload: false});\n            dispatch({ type: 'VISIBILITY', payload: true});\n            dispatch({type:\"PREDICTION\", payload: data});\n            })\n            .catch(error => {\n                setError(error.message);\n                dispatch({type:\"LOADING\", payload: false});\n                dispatch({type:\"FAIL\", payload: error.message});\n                console.log(error.message);\n            });\n        }\n        else {\n            return;\n        }\n    }, [dispatch, question, setError]);\n  \n    useEffect(() => {\n        fetchAnswer();\n    }, [fetchAnswer]);\n\n    const handleInputChange = (e) => {\n        //I want to display the number 8 unless the user clicks Ask.\n        dispatch({ type: 'VISIBILITY', payload: false});\n        let input = e.target.value;\n        setInput(e.target.value);\n        setTimeout(() => {\n            dispatch({ type: 'TEXT', payload: input});\n        }, 3000);\n    };\n\n    const handleClick = (e) => {\n        e.preventDefault();\n        setQuestion(input);\n        dispatch({ type: 'TEXT', payload: input});\n        dispatch({ type: 'VISIBILITY', payload: true});\n    };\n\n    return (\n        <div className=\"Question\">\n            <form>\n                <input type=\"text\" placeholder=\"What would you like to know?\" onChange={handleInputChange} />\n                <button onClick={handleClick} type=\"submit\">Ask!</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Question;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './Magic8Ball.scss';\n\nfunction Magic8Ball() {\n    const answer = useSelector( (state) => state.prediction);\n    const loading = useSelector( (state) => state.loading);\n    const visibility = useSelector( (state) => state.visibility);\n    \n    //Using answer.magic here to control when I can use answer.\n    const response = answer.magic && !loading ? answer.magic.answer : null;\n    const transition = loading ? <h1>Predicting...</h1> : null;\n\n    const triangle = visibility ?\n                        <div className=\"Inner-circle\">\n                            <div className=\"Triangle\">\n                                <h4 className=\"Response\">{response}</h4>\n                            </div>\n                        </div> : null;\n\n    const eight = <div className=\"Eight\">\n                    <h1 className=\"Number\">8</h1>\n                </div>;           \n\n    return (\n        <div className=\"Container\">\n            <div className={`Circle ${loading ? \"Shake\" : \"\"}`}>\n                {triangle}\n                {visibility ? null : eight}\n            </div>\n            { transition }\n        </div>\n    )\n}\n\nexport default Magic8Ball;\n","import React from 'react';\nimport Question from './Question';\nimport Magic8Ball from './Magic8Ball';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Magic 8 Ball</h1>\n      <Question />\n      <Magic8Ball />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/rootReducer';\nimport { createStore } from 'redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n    <App />\n   </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}